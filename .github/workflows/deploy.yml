name: Deploy to Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  # Pre-deployment checks
  pre-deploy:
    runs-on: ubuntu-latest
    name: Pre-deployment Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify branch
      run: |
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "Deployment only allowed from main branch"
          exit 1
        fi
    
    - name: Check required secrets
      run: |
        # List of required secrets for production
        REQUIRED_SECRETS="MONGODB_ATLAS_URI MONGODB_DATABASE OPENAI_API_KEY GEMINI_API_KEY"
        
        echo "Verifying required secrets are configured..."
        # Note: We can't access secret values, but this serves as documentation
        echo "Required secrets: $REQUIRED_SECRETS"

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: pre-deploy
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub (if using Docker Hub)
      if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build Docker image
      run: |
        docker build -t ragdoll-backend:${{ github.sha }} -t ragdoll-backend:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm ragdoll-backend:latest uv --version
        docker run --rm ragdoll-backend:latest uv run python --version
    
    # Uncomment to push to registry
    # - name: Push Docker image
    #   run: |
    #     docker push ragdoll-backend:${{ github.sha }}
    #     docker push ragdoll-backend:latest

  # Deploy to server
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Server
    needs: build
    environment:
      name: production
      url: https://iplvr.it.ntnu.no  # Update with your actual URL
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp docker-compose.yml deploy/
        cp nginx.conf deploy/
        cp Dockerfile deploy/
        
    - name: Create .env file for production
      run: |
        cat << EOF > deploy/.env
        ENV=prod
        
        # MongoDB Atlas (with vector search)
        MONGODB_ATLAS_URI=${{ secrets.MONGODB_ATLAS_URI }}
        MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}
        MONGODB_CONTEXT_COLLECTION=${{ secrets.MONGODB_CONTEXT_COLLECTION }}
        MONGODB_AGENT_COLLECTION=${{ secrets.MONGODB_AGENT_COLLECTION }}
        MONGODB_DOCUMENTS_COLLECTION=${{ secrets.MONGODB_DOCUMENTS_COLLECTION }}
        
        # LLM Configuration
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        GPT_MODEL=${{ secrets.GPT_MODEL }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}
        IDUN_API_KEY=${{ secrets.IDUN_API_KEY }}
        IDUN_MODEL=${{ secrets.IDUN_MODEL }}
        IDUN_API_URL=${{ secrets.IDUN_API_URL }}
        
        # Access Service
        ACCESS_SERVICE=service
        FERNET_KEY=${{ secrets.FERNET_KEY }}
        
        # Database System
        RAG_DATABASE_SYSTEM=mongodb
        EOF
    
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          cd /path/to/deployment/directory  # Update this path
          
          # Pull latest code (or copy from deployment package)
          git pull origin main
          
          # Stop existing containers
          docker-compose down
          
          # Pull latest images
          docker-compose pull
          
          # Start services with new configuration
          docker-compose up -d --build
          
          # Wait for services to be healthy
          sleep 10
          docker-compose ps
          
          # Check service health
          curl -f http://localhost:8000/docs || exit 1
          
          echo "Deployment successful!"
    
    # Alternative: Manual deployment instructions
    - name: Generate deployment instructions
      if: ${{ secrets.DEPLOY_HOST == '' }}
      run: |
        echo "=== Manual Deployment Instructions ==="
        echo "1. SSH into your server"
        echo "2. Navigate to your deployment directory"
        echo "3. Pull the latest changes: git pull origin main"
        echo "4. Copy the .env file with production secrets"
        echo "5. Run: docker-compose down"
        echo "6. Run: docker-compose up -d --build"
        echo "7. Check status: docker-compose ps"
        echo "8. Check logs: docker-compose logs -f"
        echo ""
        echo "Deployment package created in 'deploy' directory"

  # Health check after deployment
  verify:
    runs-on: ubuntu-latest
    name: Verify Deployment
    needs: deploy
    
    steps:
    - name: Wait for service to stabilize
      run: sleep 30
    
    - name: Health check
      run: |
        # Update with your actual production URL
        HEALTH_URL="${{ secrets.PROD_URL }}/docs"
        
        if [ -n "${{ secrets.PROD_URL }}" ]; then
          curl -f "$HEALTH_URL" || exit 1
          echo "Health check passed!"
        else
          echo "PROD_URL secret not set - skipping health check"
        fi

