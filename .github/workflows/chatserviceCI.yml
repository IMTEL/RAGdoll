# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ENV: ${{secrets.ENV}}
      OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
      GPT_MODEL: ${{secrets.GPT_MODEL}}
      GEMINI_API_KEY: ${{secrets.GEMINI_API_KEY}}
      GEMINI_MODEL: ${{secrets.GEMINI_MODEL}}
      MONGODB_URI: ${{secrets.MONGODB_URI}}
      MONGODB_DATABASE: ${{secrets.MONGODB_DATABASE}}
      MONGODB_CONTEXT_COLLECTION: ${{secrets.MONGODB_CONTEXT_COLLECTION}}
      MONGODB_AGENT_COLLECTION: ${{secrets.MONGODB_AGENT_COLLECTION}}
      RAG_DATABASE_SYSTEM: ${{secrets.RAG_DATABASE_SYSTEM}}
      MOCK_MONGODB_URI: ${{secrets.MOCK_MONGODB_URI}}
      MOCK_MONGODB_DATABASE: ${{secrets.MOCK_MONGODB_DATABASE}}
      MOCK_RAG_DATABASE_SYSTEM: ${{secrets.MOCK_RAG_DATABASE_SYSTEM}}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Create .env file
      run: |
        echo "ENV = ${{secrets.ENV}}" >> .env
        echo "OPENAI_API_KEY = ${{secrets.OPENAI_API_KEY}}" >> .env
        echo "MODEL = ${{secrets.GPT_MODEL}}" >> .env
        echo "GEMINI_API_KEY = ${{secrets.GEMINI_API_KEY}}" >> .env
        echo "GEMINI_MODEL = ${{secrets.GEMINI_MODEL}}" >> .env
        echo "MONGODB_URI = ${{secrets.MONGODB_URI}}" >> .env
        echo "MONGODB_DATABASE = ${{secrets.MONGODB_DATABASE}}" >> .env
        echo "MONGODB_CONTEXT_COLLECTION = ${{secrets.MONGODB_CONTEXT_COLLECTION}}" >> .env
        echo "RAG_DATABASE_SYSTEM = ${{secrets.RAG_DATABASE_SYSTEM}}" >> .env
        echo "MOCK_MONGODB_URI = ${{secrets.MOCK_MONGODB_URI}}" >> .env
        echo "MOCK_MONGODB_DATABASE = ${{secrets.MOCK_MONGODB_DATABASE}}" >> .env
        echo "MOCK_RAG_DATABASE_SYSTEM = ${{secrets.MOCK_RAG_DATABASE_SYSTEM}}" >> .env

    - name: Build Docker image
      run: |
        docker build -t ragdoll-backend .

    - name: Run Docker container
      run: |
        docker run -d -p 8000:8000 --name ragdoll-backend ragdoll-backend

    - name: Lint with Ruff
      id: ruff
      run: |
        continue-on-error: true
        uv run ruff check

    - name: Run tests
      run: |
        docker exec chat-service uv run pytest

    - name: Stop Docker container
      run: |
        docker compose down
