# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ENV: ${{secrets.ENV}}
      OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
      GPT_MODEL: ${{secrets.GPT_MODEL}}
      GEMINI_API_KEY: ${{secrets.GEMINI_API_KEY}}
      GEMINI_MODEL: ${{secrets.GEMINI_MODEL}}
      MONGODB_URI: ${{secrets.MONGODB_URI}}
      MONGODB_DATABASE: ${{secrets.MONGODB_DATABASE}}
      MONGODB_COLLECTION: ${{secrets.MONGODB_COLLECTION}}
      RAG_DATABASE_SYSTEM: ${{secrets.RAG_DATABASE_SYSTEM}}
      MOCK_DATABASE_SYSTEM: ${{secrets.MOCK_DATABASE_SYSTEM}}
      MOCK_MONGODB_URI: ${{secrets.MOCK_MONGODB_URI}}
      MOCK_MONGODB_DATABASE: ${{secrets.MOCK_MONGODB_DATABASE}}
      MOCK_MONGODB_COLLECTION: ${{secrets.MOCK_MONGODB_COLLECTION}}
      MOCK_RAG_DATABASE_SYSTEM: ${{secrets.MOCK_RAG_DATABASE_SYSTEM}}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Create .env file
      run: |
        echo "ENV = ${{secrets.ENV}}" >> .env
        echo "OPENAI_API_KEY = ${{secrets.OPENAI_API_KEY}}" >> .env
        echo "MODEL = ${{secrets.GPT_MODEL}}" >> .env
        echo "GEMINI_API_KEY = ${{secrets.GEMINI_API_KEY}}" >> .env
        echo "GEMINI_MODEL = ${{secrets.GEMINI_MODEL}}" >> .env
        echo "MONGODB_URI = ${{secrets.MONGODB_URI}}" >> .env
        echo "MONGODB_DATABASE = ${{secrets.MONGODB_DATABASE}}" >> .env
        echo "MONGODB_COLLECTION = ${{secrets.MONGODB_COLLECTION}}" >> .env
        echo "RAG_DATABASE_SYSTEM = ${{secrets.RAG_DATABASE_SYSTEM}}" >> .env
        echo "MOCK_DATABASE_SYSTEM = ${{secrets.MOCK_DATABASE_SYSTEM}}" >> .env
        echo "MOCK_MONGODB_URI = ${{secrets.MOCK_MONGODB_URI}}" >> .env
        echo "MOCK_MONGODB_DATABASE = ${{secrets.MOCK_MONGODB_DATABASE}}" >> .env
        echo "MOCK_MONGODB_COLLECTION = ${{secrets.MOCK_MONGODB_COLLECTION}}" >> .env
        echo "MOCK_RAG_DATABASE_SYSTEM = ${{secrets.MOCK_RAG_DATABASE_SYSTEM}}" >> .env

    - name: Build Docker image
      run: |
        docker compose build
        
# docker build -t chat-service .

    - name: Run Docker container
      run: |
        docker compose up -d
# docker run -d -p 8000:8000 --name chat-service chat-service
        
    # - name: Lint with flake8
    #   run: |
    #     continue-on-error: true
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
        
    # - name: Check if 'Lint with flake8' step failed
    #   if: steps.flake8.outcome != 'success'
    #   run: |
    #     echo "flake8 fails"
    #     exit 1
      
    - name: Test with pytest
      run: |
        docker compose run chat-service pytest
    
# docker exec chat-service pytest

    - name: Stop Docker container
      run: |
        docker compose down
