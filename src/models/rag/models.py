"""RAG (Retrieval-Augmented Generation) domain models."""

from datetime import datetime

from pydantic import BaseModel, Field


class RAGPostModel(BaseModel):
    """Data model for posting documents to the RAG system.

    Represents a document chunk with its embedding that will be
    stored in the vector database for semantic search.

    Attributes:
        text: The actual text content of the document chunk
        document_id: Unique identifier for the source document
        document_name: Human-readable name of the source document
        npc: NPC identifier associated with this content
        embedding: Vector embedding of the text
    """

    text: str
    document_id: str
    document_name: str
    npc: int
    embedding: list[float] = Field(default_factory=list)


class Document(BaseModel):
    """Document metadata for RAG system.

    Represents metadata about a document that has been uploaded to the system.
    The actual text content is stored as Context chunks that reference this document.

    Attributes:
        id: Unique identifier for the document (generated by DB)
        name: Human-readable name of the document
        agent_id: ID of the agent this document belongs to
        created_at: Timestamp when document was created
        updated_at: Timestamp when document was last modified
    """

    id: str | None = Field(default=None, description="Unique document identifier")
    name: str = Field(..., description="Document name")
    agent_id: str = Field(..., description="Agent that owns this document")
    created_at: datetime = Field(
        default_factory=datetime.now, description="Creation timestamp"
    )
    updated_at: datetime = Field(
        default_factory=datetime.now, description="Last update timestamp"
    )
