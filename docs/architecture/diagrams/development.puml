@startuml DevelopmentView
skinparam packageStyle rectangle
skinparam packageLayout vertical
skinparam nodesep 50

package "src.rag_service.context" {
  class Context
}

package "src.rag_service.dao" {
  abstract class Database {
    +get_context_from_NPC(NPC: int) : List<Context>
    +get_context(document_name: str, embedding: List<float>) : List<Context>
    +post_context(text: str, document_name: str, NPC: int, embedding: List<float>, id: str) : bool
    +is_reachable() : bool
  }
  class MongoDB
  class MockDatabase
  class LocalMockDatabase
}

package "src.rag_service.embeddings" {
  abstract class EmbeddingsModel {
    +get_embedding(text: str) : List<float>
  }
  class OpenAIEmbedding {
    +get_embedding(text: str) : List<float>
    {static} +create_embeddings_model() : EmbeddingsModel
  }
}

package "src.rag_service.llm" {
  interface LLM {
    +create_prompt(base_prompt: str, **kwargs) : str
    +generate(prompt: str) : str
  }
  class OpenAI_LLM {
    +create_prompt(base_prompt: str, **kwargs) : str
    +generate(prompt: str) : str
    {static} +create_llm() : LLM
  }
  class Gemini_LLM {
    +create_prompt(base_prompt: str, **kwargs) : str
    +generate(prompt: str) : str
  }
}

package "src.rag_service.command" {
  abstract class Command {
    +execute() : void
  }
  class GetContextCommand
  class PostContextCommand
}

package "main_repo" {
  class ActionManager <<Singleton>>
  class ChatServiceModule
}

ActionManager --> ChatServiceModule
ChatServiceModule --> "src.rag_service.dao::Database" : Uses DAO
ChatServiceModule --> "src.rag_service.embeddings::EmbeddingsModel" : Uses embeddings model
ChatServiceModule --> "src.rag_service.llm::LLM" : Uses LLM for response

@enduml
