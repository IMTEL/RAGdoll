@startuml PhysicalView
skinparam linetype ortho
top to bottom direction



node "Docker Host" {
node "Chat Service Microservice Infrastructure" {
    component "Chat Service Endpoint" as CS_Endpoint 
    component "whisper model" as Whisper
  node "RAG " {
    component "RAG Entry Point" as RAG_Entry
    component "DAO Component" as DAO
    component "LLM Facade" as LLM
    component "Embeddings Component" as Embeddings
  }
  database "MongoDB Atlas" as DB
  
}
}

' node "VR Environment"{
'   component "Action Manager\n(Chat Service Module)" as AM
' }

cloud "External Services" as Cloud {

    component "OpenAI LLM" as OpenAI_LLM
    component "Gemini LLM" as Gemini_LLM
    component "Google Embedding" as Google_Embedding
    database "Local Mock Database" as MockDB
  
}

' AM --> RAG_Entry : HTTPS Request
CS_Endpoint --> RAG_Entry : Calls after preprocessing
CS_Endpoint --> Whisper : Audio transcription
RAG_Entry --> DAO : Data access
DAO --> MockDB : Data access via DAO
DAO --> DB : Data access via DAO
RAG_Entry --> LLM : API call to LLM service

RAG_Entry --> Embeddings: Embed and similarity search
Embeddings --> Google_Embedding : Embed query
LLM --> OpenAI_LLM : Generate response
LLM --> Gemini_LLM : Generate response

note right of Whisper
    Transcription model hosted locally
end note

note right of CS_Endpoint
    Chat Service Endpoint
    - Receives data from Blue Sector via HTTP
    - Sends responses back to Blue Sector via HTTP
end note

@enduml
